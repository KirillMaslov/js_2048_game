{"version":3,"sources":["scripts/main.js"],"names":["occupiedCells","accessToMoveUp","accessToMoveDown","accessToMoveRight","accessToMoveLeft","scoreNum","startX","startY","startButton","document","querySelector","startMessage","restartMessage","loseMessage","winMessage","cells","querySelectorAll","cellArr","gameScore","finalScore","freeCells","Directions","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","createNewCell","cellNum","Math","floor","random","length","classList","add","innerText","push","splice","cellsChecker","forEach","cell","textContent","accessChecker","handleTouchStart","e","pageX","touches","pageY","handleTouchMove","remove","currentX","currentY","deltaX","deltaY","abs","moveCellsLeft","moveCellsRight","moveCellsUp","moveCellsDown","accessNum","indexOf","doublCount","celltext","Number","rvrsdOccpdCells","reverse","doubleCount","parentRow","parentElement","children","addEventListener","contains","className","i","key"],"mappings":"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","file":"main.557e6dd1.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst restartMessage = document.querySelector('.message-restart');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst cells = document.querySelectorAll('.field-cell');\nconst cellArr = [ ...cells ];\nconst gameScore = document.querySelector('.game-score');\nconst finalScore = '2048';\nlet freeCells = [];\nlet occupiedCells;\nlet accessToMoveUp;\nlet accessToMoveDown;\nlet accessToMoveRight;\nlet accessToMoveLeft;\nlet scoreNum;\nlet startX;\nlet startY;\n// Directions Object\nconst Directions = {\n  ArrowUp: 'ArrowUp',\n  ArrowDown: 'ArrowDown',\n  ArrowLeft: 'ArrowLeft',\n  ArrowRight: 'ArrowRight',\n};\n\n// cells creator\nfunction createNewCell() {\n  const cellNum = Math.floor(Math.random() * freeCells.length);\n\n  freeCells[cellNum].classList.add('field-cell--2');\n  freeCells[cellNum].innerText = 2;\n\n  occupiedCells.push(freeCells[cellNum]);\n\n  freeCells.splice(cellNum, 1);\n}\n\n//  checker for free cells\nfunction cellsChecker() {\n  freeCells = [];\n  occupiedCells = [];\n\n  cellArr.forEach(cell => {\n    if (cell.textContent === '') {\n      freeCells.push(cell);\n    } else {\n      occupiedCells.push(cell);\n    }\n  });\n}\n\n// checker for access\nfunction accessChecker() {\n  return !accessToMoveUp && !accessToMoveDown\n  && !accessToMoveRight && !accessToMoveLeft;\n}\n\nfunction handleTouchStart(e) {\n  startX = e.pageX || e.touches[0].pageX;\n  startY = e.pageY || e.touches[0].pageY;\n}\n\nfunction handleTouchMove(e) {\n  if (!startX || !startY) {\n    return;\n  }\n\n  if (cellArr.length === occupiedCells.length\n    && accessChecker()) {\n    accessToMoveUp = false;\n    accessToMoveDown = false;\n    accessToMoveRight = false;\n    accessToMoveLeft = false;\n\n    loseMessage.classList.remove('hidden');\n\n    return;\n  }\n\n  const currentX = e.pageX || e.touches[0].pageX;\n  const currentY = e.pageY || e.touches[0].pageY;\n\n  const deltaX = startX - currentX;\n  const deltaY = startY - currentY;\n\n  // Set the minimum swipe distance for it to be considered a swipe\n  const minimumSwipeDistance = 5;\n\n  // Check if the swipe is horizontal or vertical based on the distance\n  if (Math.abs(deltaX) > minimumSwipeDistance) {\n    if (deltaX > 0) {\n      // Swipe left\n      moveCellsLeft();\n    } else {\n      // Swipe right\n      moveCellsRight();\n    }\n  } else if (Math.abs(deltaY) > minimumSwipeDistance) {\n    if (deltaY > 0) {\n      // Swipe up\n      moveCellsUp();\n    } else {\n      // Swipe down\n      moveCellsDown();\n    }\n  }\n\n  // Reset start position\n  startX = null;\n  startY = null;\n}\n\nfunction moveCellsUp() {\n  let accessNum = 0;\n\n  occupiedCells.forEach(cell => {\n    let cellNum = cellArr.indexOf(cell);\n    let doublCount = 0;\n\n    while (cellNum >= 0) {\n      cellNum -= 4;\n\n      if (cellNum < 0) {\n        break;\n      } else if (cellArr[cellNum].textContent !== '') {\n        if (cellArr[cellNum].textContent\n          === cellArr[cellNum + 4].textContent\n          && doublCount === 0) {\n          const celltext = cellArr[cellNum + 4].textContent;\n\n          cellArr[cellNum].classList.add(\n            `field-cell--${Number(celltext) * 2}`);\n          cellArr[cellNum].innerText = `${Number(celltext) * 2}`;\n\n          cellArr[cellNum].classList.remove(\n            `field-cell--${celltext}`);\n          cellArr[cellNum + 4].classList.remove(`field-cell--${celltext}`);\n          cellArr[cellNum + 4].innerText = '';\n          scoreNum += Number(celltext) * 2;\n          gameScore.innerText = `${scoreNum}`;\n          accessNum = 1;\n          doublCount++;\n        } else {\n          break;\n        }\n      } else {\n        const celltext = cellArr[cellNum + 4].textContent;\n\n        accessNum = 1;\n        cellArr[cellNum].innerText = celltext;\n\n        cellArr[cellNum].classList.add(\n          `field-cell--${celltext}`);\n        cellArr[cellNum + 4].classList.remove(`field-cell--${celltext}`);\n        cellArr[cellNum + 4].innerText = '';\n      }\n    }\n  });\n\n  cellsChecker();\n\n  if (!accessNum) {\n    accessToMoveUp = false;\n  } else {\n    createNewCell();\n    accessToMoveDown = true;\n    accessToMoveRight = true;\n    accessToMoveLeft = true;\n  }\n}\n\nfunction moveCellsDown() {\n  const rvrsdOccpdCells = [ ...occupiedCells ].reverse();\n  let accessNum = 0;\n\n  rvrsdOccpdCells.forEach(cell => {\n    let cellNum = cellArr.indexOf(cell);\n    let doubleCount = 0;\n\n    while (cellNum <= 16) {\n      cellNum += 4;\n\n      if (cellNum >= 16) {\n        break;\n      } else if (cellArr[cellNum].textContent !== '') {\n        if (cellArr[cellNum].textContent\n          === cellArr[cellNum - 4].textContent\n          && doubleCount === 0) {\n          const celltext = cellArr[cellNum - 4].textContent;\n\n          cellArr[cellNum].classList.add(\n            `field-cell--${Number(celltext) * 2}`);\n          cellArr[cellNum].innerText = `${Number(celltext) * 2}`;\n\n          cellArr[cellNum].classList.remove(\n            `field-cell--${celltext}`);\n          cellArr[cellNum - 4].classList.remove(`field-cell--${celltext}`);\n          cellArr[cellNum - 4].innerText = '';\n          scoreNum += Number(celltext) * 2;\n          gameScore.innerText = `${scoreNum}`;\n          accessNum = 1;\n          doubleCount++;\n        } else {\n          break;\n        }\n      } else {\n        const celltext = cellArr[cellNum - 4].textContent;\n\n        accessNum = 1;\n        cellArr[cellNum].innerText = celltext;\n\n        cellArr[cellNum].classList.add(\n          `field-cell--${celltext}`);\n        cellArr[cellNum - 4].classList.remove(`field-cell--${celltext}`);\n        cellArr[cellNum - 4].innerText = '';\n      }\n    }\n  });\n  cellsChecker();\n\n  if (!accessNum) {\n    accessToMoveDown = false;\n  } else {\n    createNewCell();\n    accessToMoveUp = true;\n    accessToMoveRight = true;\n    accessToMoveLeft = true;\n  }\n}\n\nfunction moveCellsRight() {\n  const rvrsdOccpdCells = [ ...occupiedCells ].reverse();\n  let accessNum = 0;\n\n  rvrsdOccpdCells.forEach(cell => {\n    const parentRow = [ ...cell.parentElement.children ].reverse();\n    let cellNum = parentRow.indexOf(cell);\n    let doubleCount = 0;\n\n    while (cellNum > 0) {\n      cellNum -= 1;\n\n      if (cellNum < 0) {\n        break;\n      } else if (parentRow[cellNum].textContent !== '') {\n        if (parentRow[cellNum].textContent\n            === parentRow[cellNum + 1].textContent\n            && doubleCount === 0) {\n          const celltext = parentRow[cellNum + 1].textContent;\n\n          parentRow[cellNum].classList.add(\n            `field-cell--${Number(celltext) * 2}`);\n          parentRow[cellNum].innerText = `${Number(celltext) * 2}`;\n\n          parentRow[cellNum].classList.remove(\n            `field-cell--${celltext}`);\n          parentRow[cellNum + 1].classList.remove(`field-cell--${celltext}`);\n          parentRow[cellNum + 1].innerText = '';\n          scoreNum += Number(celltext) * 2;\n          gameScore.innerText = `${scoreNum}`;\n          accessNum = 1;\n          doubleCount++;\n        }\n      } else {\n        const celltext = parentRow[cellNum + 1].textContent;\n\n        parentRow[cellNum].innerText = celltext;\n\n        parentRow[cellNum].classList.add(\n          `field-cell--${celltext}`);\n        parentRow[cellNum + 1].classList.remove(`field-cell--${celltext}`);\n        parentRow[cellNum + 1].innerText = '';\n\n        accessNum = 1;\n      }\n    }\n  });\n\n  cellsChecker();\n\n  if (!accessNum) {\n    accessToMoveRight = false;\n  } else {\n    createNewCell();\n    accessToMoveUp = true;\n    accessToMoveDown = true;\n    accessToMoveLeft = true;\n  }\n}\n\nfunction moveCellsLeft() {\n  let accessNum = 0;\n\n  occupiedCells.forEach(cell => {\n    const parentRow = [ ...cell.parentElement.children ];\n    let cellNum = parentRow.indexOf(cell);\n    let doubleCount = 0;\n\n    while (cellNum > 0) {\n      cellNum -= 1;\n\n      if (cellNum < 0) {\n        break;\n      } else if (parentRow[cellNum].textContent !== '') {\n        if (parentRow[cellNum].textContent\n            === parentRow[cellNum + 1].textContent\n            && doubleCount === 0) {\n          const celltext = parentRow[cellNum + 1].textContent;\n\n          parentRow[cellNum].classList.add(\n            `field-cell--${Number(celltext) * 2}`);\n          parentRow[cellNum].innerText = `${Number(celltext) * 2}`;\n\n          parentRow[cellNum].classList.remove(\n            `field-cell--${celltext}`);\n          parentRow[cellNum + 1].classList.remove(`field-cell--${celltext}`);\n          parentRow[cellNum + 1].innerText = '';\n          scoreNum += Number(celltext) * 2;\n          gameScore.innerText = `${scoreNum}`;\n          accessNum = 1;\n          doubleCount++;\n        }\n      } else {\n        const celltext = parentRow[cellNum + 1].textContent;\n\n        parentRow[cellNum].innerText = celltext;\n\n        parentRow[cellNum].classList.add(\n          `field-cell--${celltext}`);\n        parentRow[cellNum + 1].classList.remove(`field-cell--${celltext}`);\n        parentRow[cellNum + 1].innerText = '';\n\n        accessNum = 1;\n      }\n    }\n  });\n\n  cellsChecker();\n\n  if (!accessNum) {\n    accessToMoveLeft = false;\n  } else {\n    createNewCell();\n    accessToMoveUp = true;\n    accessToMoveDown = true;\n    accessToMoveRight = true;\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.remove('start');\n    restartMessage.classList.remove('hidden');\n    startButton.classList.add('restart');\n    startButton.innerText = 'Restart';\n    startMessage.classList.add('hidden');\n  }\n\n  gameScore.innerText = '0';\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n\n  freeCells = [ ...cellArr ];\n  occupiedCells = [];\n  accessToMoveUp = true;\n  accessToMoveDown = true;\n  accessToMoveRight = true;\n  accessToMoveLeft = true;\n  scoreNum = 0;\n\n  freeCells.forEach(cell => {\n    cell.className = 'field-cell';\n    cell.innerText = '';\n  });\n\n  for (let i = 0; i < 2; i++) {\n    createNewCell();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  occupiedCells.forEach(cell => {\n    if (cell.textContent === finalScore) {\n      accessToMoveUp = false;\n      accessToMoveDown = false;\n      accessToMoveRight = false;\n      accessToMoveLeft = false;\n\n      winMessage.classList.remove('hidden');\n    }\n  });\n\n  if (cellArr.length === occupiedCells.length\n    && accessChecker()) {\n    accessToMoveUp = false;\n    accessToMoveDown = false;\n    accessToMoveRight = false;\n    accessToMoveLeft = false;\n\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (e.key === Directions.ArrowUp && accessToMoveUp) {\n    moveCellsUp();\n  }\n\n  if (e.key === Directions.ArrowDown && accessToMoveDown) {\n    moveCellsDown();\n  }\n\n  if (e.key === Directions.ArrowRight && accessToMoveRight) {\n    moveCellsRight();\n  }\n\n  if (e.key === Directions.ArrowLeft && accessToMoveLeft) {\n    moveCellsLeft();\n  }\n});\n\ndocument.addEventListener('touchstart', handleTouchStart, false);\ndocument.addEventListener('mousedown', handleTouchStart, false);\n\ndocument.addEventListener('touchmove', handleTouchMove, false);\ndocument.addEventListener('mousemove', handleTouchMove, false);\n"]}